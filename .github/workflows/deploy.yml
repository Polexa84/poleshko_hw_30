name: Django CI/CD Pipeline

on:
  push:
    branches:
      - develop_1

env:
  REDIS_HOST: localhost
  REDIS_PORT: 6379
  REDIS_DB: 0
  DATABASE_URL: postgres://postgres:password@localhost:5432/testdb
  PYTHONPATH: ${{ github.workspace }}
  DJANGO_SETTINGS_MODULE: myproject.config.settings

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      redis:
        image: redis:7
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('myproject/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r myproject/requirements.txt

    - name: Verify project structure
      run: |
        echo "Current directory: $(pwd)"
        ls -la
        ls -la myproject
        echo "Python path:"
        python -c "import sys; print('\n'.join(sys.path))"

    - name: Run migrations
      working-directory: ./myproject
      run: |
        python manage.py makemigrations
        python manage.py migrate

    - name: Run tests
      working-directory: ./myproject
      run: python manage.py test --parallel --verbosity=2

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Setup server connection
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Sync project files
      run: |
        rsync -avz \
          --exclude '__pycache__' \
          --exclude '.git' \
          --exclude '*.pyc' \
          . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

    - name: Setup application services
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -ex
          PROJECT_DIR="${{ secrets.DEPLOY_DIR }}/myproject"
          VENV_PATH="/home/deployer/poleshko_hw_30/venv"
          
          echo "Installing dependencies..."
          source "$VENV_PATH/bin/activate"
          pip install -r "$PROJECT_DIR/requirements.txt"
          
          echo "Applying migrations..."
          python "$PROJECT_DIR/manage.py" migrate
          
          echo "Collecting static files..."
          python "$PROJECT_DIR/manage.py" collectstatic --noinput
          
          echo "Configuring services..."
          sudo cp "$PROJECT_DIR/config/gunicorn.service" /etc/systemd/system/
          sudo cp "$PROJECT_DIR/config/celery.service" /etc/systemd/system/
          sudo cp "$PROJECT_DIR/config/celery-beat.service" /etc/systemd/system/
          
          sudo systemctl daemon-reload
          sudo systemctl enable gunicorn celery celery-beat
        EOF

    - name: Restart services
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -ex
          sudo systemctl restart gunicorn
          sudo systemctl restart celery
          sudo systemctl restart celery-beat
          sudo systemctl reload nginx
        EOF