name: Django CI/CD Pipeline

on:
  push:
    branches:
      - develop_1

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14  # Укажите нужную версию PostgreSQL
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: postgres  # Значение по умолчанию, можно изменить
          POSTGRES_PASSWORD: password  # Значение по умолчанию, можно изменить
          POSTGRES_DB: testdb  # Значение по умолчанию, можно изменить
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up database
      working-directory: ./myproject
      run: python manage.py migrate

    - name: Run tests
      working-directory: ./myproject
      run: python manage.py test

    env:
      POSTGRES_DB_NAME: testdb  # Имя тестовой базы данных
      POSTGRES_USER: postgres  # Имя пользователя PostgreSQL
      POSTGRES_PASSWORD: password  # Пароль пользователя PostgreSQL

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@main
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Copy project files to server
      run: |
        echo "Copying project files to server..."
        rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}
        echo "Files copied."

    - name: Install dependencies on server
      run: |
        echo "Installing dependencies on server..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -x  # Включаем отладку
          cd ${{ secrets.DEPLOY_DIR }}
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
        EOF
        echo "Dependencies installed."

    - name: Apply migrations on server
      run: |
        echo "Applying migrations on server..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -x  # Включаем отладку
          cd ${{ secrets.DEPLOY_DIR }}
          source venv/bin/activate
          python manage.py migrate
        EOF
        echo "Migrations applied."

    - name: Collect static files on server
      run: |
        echo "Collecting static files on server..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -x  # Включаем отладку
          cd ${{ secrets.DEPLOY_DIR }}
          source venv/bin/activate
          python manage.py collectstatic --noinput
        EOF
        echo "Static files collected."

    - name: Restart application
      run: |
        echo "Restarting application..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -x  # Включаем отладку
          sudo systemctl restart myapp.service
        EOF
        echo "Application restarted."

    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_USER: ${{ secrets.SSH_USER }}
      DEPLOY_DIR: ${{ secrets.DEPLOY_DIR }}