name: Django CI/CD Pipeline

on:
  push:
    branches:
      - develop_1

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('myproject/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r myproject/requirements.txt

    - name: Set up environment
      run: |
        echo "PYTHONPATH=$GITHUB_WORKSPACE/myproject" >> $GITHUB_ENV
        echo "DJANGO_SETTINGS_MODULE=myproject.settings" >> $GITHUB_ENV

    - name: Run migrations
      working-directory: ./myproject
      run: python manage.py migrate
      env:
        DATABASE_URL: postgres://postgres:password@localhost:5432/testdb

    - name: Run tests
      working-directory: ./myproject
      run: python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4 # Обновлена до v4

    - name: Set up SSH
      # Использовать актуальную стабильную версию экшена
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    # Шаг для добавления ключа хоста сервера в known_hosts
    - name: Add server host key to known_hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        # Установка правильных прав доступа для файла known_hosts
        chmod 600 ~/.ssh/known_hosts

    - name: Copy project files to server
      run: |
        echo "Copying project files to server..."
        # Используем секреты для подключения и пути
        rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}
        echo "Files copied."

    - name: Install dependencies, apply migrations, collect static files
      run: |
        echo "Executing commands on server..."
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -e  # Выходить при первой ошибке
          set -x  # Подробный вывод выполняемых команд
          echo "Changing directory to deployment folder..."
          # Указываем путь к директории с файлом manage.py
          PROJECT_DIR="/home/deployer/poleshko_hw_30/myproject" 
          cd "$PROJECT_DIR"
          
          echo "Activating virtual environment from project root..."
          # Виртуальное окружение находится в корне проекта, а не внутри myproject
          source /home/deployer/poleshko_hw_30/venv/bin/activate 
          
          echo "Installing project dependencies..."
          pip install -r requirements.txt
          echo "Applying database migrations..."
          python manage.py migrate
          echo "Collecting static files..."
          python manage.py collectstatic --noinput
          echo "Deployment commands executed successfully."
        EOF
        echo "Commands executed on server."

    - name: Restart application
      run: |
        echo "Restarting application..."
        # Здесь нужен sudo, поэтому отдельный шаг.
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -e # Выходить при первой ошибке
          set -x  # Подробный вывод выполняемых команд
          sudo systemctl restart gunicorn.service
          sudo systemctl reload nginx # Перезагрузка Nginx (если это необходимо)
        EOF
        echo "Application restarted."
